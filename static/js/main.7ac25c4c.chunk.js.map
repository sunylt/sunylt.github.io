{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TOKENS","9490820","50497","49653","49681","3756934","1712771","8520497","6771938","App","state","isLoading","priceList","records","filterData","index","data","_this","setState","checkAll","forEach","r","this","fetchExchangeRecords","then","res","syncTicker","login","handleKeyboard","document","body","addEventListener","e","which","multiAction","ws","WebSocket","onmessage","info","JSON","parse","tick","symbol","price","change","percent_change_24h","onopen","send","stringify","event","params","ids","Object","keys","map","id","fetch","json","_this2","_this$state","remain","assetsExchanged","parseInt","tokenName","split","amount","rows","react_default","a","createElement","key","type","checked","onChange","exchangedValue","priceSyncCount","needPrice","tokenSymbol","priceSyncOK","canShowPrice","AE","window","className","border","cellPadding","cellSpacing","width","align","onClick","App_Loading","token","App_PriceView","toFixed","Component","PriceView","_ref","style","color","Loading","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ac25c4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst DEFAULT_AMOUNT = 28000 + 46400\nconst TOKENS = {\n  9490820: 'KEY',\n  50497: 'AE',\n  49653: 'BTC',\n  49681: 'SNT',\n  3756934: 'LEND',\n  1712771: 'FUEL',\n  8520497: 'MTX',\n  6771938: 'DEW'\n}\n\nclass App extends Component {\n\n  state = {\n    isLoading: false,\n    priceList: {},\n    records: []\n  }\n\n  componentDidMount() {\n    const  _this = this\n    this.fetchExchangeRecords().then(res => {\n      const data = res.data\n      _this.setState({\n        records: data\n      })\n      _this.syncTicker()\n    })\n\n    this.login()\n    this.handleKeyboard()\n  }\n\n  handleKeyboard(){\n    const _this = this\n    document.body.addEventListener('keydown', function(e) {\n      if (e.which === 16) {\n        _this.multiAction = true\n      }\n    })\n    document.body.addEventListener('keyup', function(e) {\n      if (e.which === 16) {\n        _this.multiAction = false\n      }\n    })\n  }\n\n  syncTicker() {\n    const _this = this\n    const ws = new WebSocket('wss://ws.cn-east.mytokenapi.com/ticker')\n    ws.onmessage = function(e) {\n      const data = JSON.parse(e.data)\n      const info = data.data\n      if (info && info.tick) {\n        const priceList = _this.state.priceList\n        priceList[info.tick.symbol] = {\n          price: info.tick.price,\n          change: info.tick.percent_change_24h\n        }\n        _this.setState({\n          priceList\n        })\n      }\n    }\n    ws.onopen = function() {\n      ws.send(\n        JSON.stringify({\"event\":\"ticker\",\"params\":{\"ids\": Object.keys(TOKENS).map(id => +id)}})\n      )\n    }\n  }\n\n  login() {\n    // return fetch('https://www.easy-mock.com/api/u/login', {\n    //   method: 'POST',\n    //   credentials: 'include',\n    //   body: JSON.stringify({name: 'sunylt', password: '123'})\n    //   })\n  }\n\n  fetchExchangeRecords() {\n    return fetch('https://www.easy-mock.com/mock/59d892fd9d342f449f303370/app/records').then(res => res.json())\n  }\n\n  filterData = (index) => {\n    const data = this.state.records\n    if (data[index][4] !== false) {\n      data[index][4] = false\n    } else {\n      data[index][4] = true\n    }\n\n    this.setState({\n      records: data\n    })\n    \n  }\n\n  checkAll = () => {\n    const data = this.state.records\n    data.forEach(r => {\n      r[4] = true\n    })\n    this.setState({\n      records: data\n    })\n  }\n\n  render() {\n    const _this = this\n    const { priceList, records } = this.state\n    let remain = 0\n    const assetsExchanged = {}\n    records.forEach(data => {\n    \n      if (data[4] === false) {\n        return\n      }\n      remain += parseInt(data[1])\n\n      // 如果有兑换记录\n      if (data[2]) {\n        const res = data[2].split(/\\d+/)\n        //const isAdd = res[0] === '+'\n        const tokenName = res[1]\n        const amount = parseInt(data[2])\n        if (typeof assetsExchanged[tokenName] === 'undefined') {\n          assetsExchanged[tokenName] = amount\n        } else {\n          assetsExchanged[tokenName] = assetsExchanged[tokenName] + amount\n        }\n        if (assetsExchanged[tokenName] === 0) {\n          //delete assetsExchanged[tokenName]\n        }\n      }\n    })\n\n    const rows = records.map((data, index) => (<tr key={index}><td>{data[0]}</td><td>{data[1]}</td><td>{data[2]}</td><td><input type=\"checkbox\"  checked={data[4] !== false ? true: false} onChange={() => _this.filterData(index)} /></td><td>{data[3]}</td></tr>))\n    let exchangedValue = 0\n    let priceSyncCount = 0\n    let needPrice = 0\n    Object.keys(assetsExchanged).forEach(tokenSymbol => {\n      if (assetsExchanged[tokenSymbol] > 0) {\n        needPrice +=1\n        if (this.state.priceList[tokenSymbol]) {\n          exchangedValue += assetsExchanged[tokenSymbol] * this.state.priceList[tokenSymbol].price\n          priceSyncCount += 1\n        }\n      }\n    })\n\n    const priceSyncOK = priceSyncCount === needPrice\n    const canShowPrice = priceList.AE && priceSyncOK\n    //const btc = priceList.BTC && canShowPrice ? (exchangedValue + remain * priceList.AE)/priceList.BTC : ''\n\n    window.assetsExchanged = assetsExchanged\n    \n    return (\n      <div className=\"App\">\n        {/* <div className=\"login\">\n          <input type=\"password\" placeholder=\"请输入密码\" />\n        </div> */}\n        <h2>兑换记录</h2>\n        <table border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" width=\"88%\" align=\"center\">\n          <thead>\n            <tr>\n              <th width=\"20%\">DATE</th>\n              <th width=\"25%\">SELL/BUY AE</th>\n              <th width=\"25%\">SELL/BUY TOKEN</th>\n              <th width=\"33%\"><span id=\"check-all\" onClick={this.checkAll}>CHECK ALL</span></th>\n              <th width=\"27%\">NOTE</th>\n            </tr>\n          </thead>\n          <tbody>\n            { rows }\n            <tr>\n              <td>BENEFIT</td>\n              <td className=\"ae-total\">REMAIN <b>{remain}</b> AE</td>\n              <td>CONVERT <b>{canShowPrice ? parseInt(exchangedValue/priceList.AE.price) : <Loading />}</b> AE</td>\n              <td>TOTAL <b>{canShowPrice ? \n                (remain + parseInt(exchangedValue/priceList.AE.price)) + ' (' + (remain + parseInt(exchangedValue/this.state.priceList.AE.price) - DEFAULT_AMOUNT) + ')'\n                :\n                 <Loading />\n              }</b> AE</td>\n              <td></td>\n            </tr>\n          </tbody>\n        </table>\n\n        <h2>已兑换资产</h2>\n        <table border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" width=\"88%\" align=\"center\" className=\"exchangedAssets\">\n            <thead>\n              <tr>\n                <th width=\"20%\">TOKEN</th>\n                <th width=\"25%\">CHANGE(24H)</th>\n                <th width=\"25%\">PRICE</th>                \n                <th width=\"65%\">AMOUNT</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                Object.keys(assetsExchanged).map(token => <tr key={token}><td>{token}</td><td>{priceList[token] ? <PriceView price={priceList[token].change} /> : <Loading />}</td><td>{ priceList[token] ? '￥' + priceList[token].price.toFixed(5) : <Loading /> }</td><td>{assetsExchanged[token]}</td></tr>)\n              }\n              <tr>\n                <td>AE</td><td>{priceList.AE ? <PriceView price={priceList.AE.change} /> : <Loading />}</td><td>{ priceList.AE ? '￥' + priceList.AE.price.toFixed(5) : <Loading /> }</td><td>{ remain }</td>\n              </tr>\n            </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst PriceView = ({price}) => {\n  return <span style={{color: +price < 0 ? 'red' : 'green'}}>{ price }%</span>\n}\n\nconst Loading = () => (\n  <div className=\"loadEffect\">\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}