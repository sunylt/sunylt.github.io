{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","priceList","_this","this","ws","WebSocket","onmessage","e","info","JSON","parse","data","tick","symbol","price","setState","onopen","send","stringify","event","params","ids","_this2","records","rows","map","index","react_default","a","createElement","key","remain","assetsExchanged","forEach","parseInt","tokenName","split","amount","exchangedValue","priceSyncCount","needPrice","Object","keys","tokenSymbol","priceSyncOK","canShowPrice","AE","window","className","border","cellPadding","cellSpacing","width","align","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61d6bc1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst DEFAULT_AMOUNT = 28000 + 46400\n\nclass App extends Component {\n\n  state = {\n    priceList: {}\n  }\n\n  componentDidMount() {\n    const _this = this\n    const ws = new WebSocket('wss://ws.cn-east.mytokenapi.com/ticker')\n    ws.onmessage = function(e) {\n      const data = JSON.parse(e.data)\n      const info = data.data\n      if (info && info.tick) {\n        const priceList = _this.state.priceList\n        priceList[info.tick.symbol] = info.tick.price\n        _this.setState({\n          priceList\n        })\n      }\n    }\n    ws.onopen = function() {\n      ws.send(\n        JSON.stringify({\"event\":\"ticker\",\"params\":{\"ids\":[49653, 50497, 3756934, 49681, 8520497, 6771938]}})\n      )\n    }\n  }\n  render() {\n    const records = [\n      ['', '+28000', '', 'BINANCE'],\n      ['', '+46400', '', 'HBG'],\n      ['', '-6400', '+120000MTX', ''],\n      ['', '+6600', '-120000MTX', ''],\n      ['', '-4000', '+22000DEW', ''],\n      ['', '+4800', '-22000DEW', ''],\n      ['', '-6200', '+1000000KEY', ''],\n      ['', '+6300', '-1000000KEY', ''],\n      ['2019/03/27', '-39200', '+2012533LEND', '0.00000220BTC'],\n      ['2019/03/28', '-10300', '+211544SNT', ''],\n      ['2019/03/29', '+7280', '-350000LEND', '0.00000245BTC'],\n    ]\n    const rows = records.map((data, index) => (<tr key={index}><td>{data[0]}</td><td>{data[1]}</td><td>{data[2]}</td><td>{data[3]}</td></tr>))\n    let remain = 0\n    const assetsExchanged = {}\n    records.forEach(data => {\n      remain += parseInt(data[1])\n\n      // 如果有兑换记录\n      if (data[2]) {\n        const res = data[2].split(/\\d+/)\n        //const isAdd = res[0] === '+'\n        const tokenName = res[1]\n        const amount = parseInt(data[2])\n        if (typeof assetsExchanged[tokenName] === 'undefined') {\n          assetsExchanged[tokenName] = amount\n        } else {\n          assetsExchanged[tokenName] = assetsExchanged[tokenName] + amount\n        }\n      }\n    })\n\n    let exchangedValue = 0\n    let priceSyncCount = 0\n    let needPrice = 0\n    Object.keys(assetsExchanged).forEach(tokenSymbol => {\n      if (assetsExchanged[tokenSymbol] > 0) {\n        needPrice +=1\n        if (this.state.priceList[tokenSymbol]) {\n          exchangedValue += assetsExchanged[tokenSymbol] * this.state.priceList[tokenSymbol]\n          priceSyncCount += 1\n        }\n      }\n    })\n\n    const { priceList } = this.state\n    const priceSyncOK = priceSyncCount === needPrice\n    const canShowPrice = priceList.AE && priceSyncOK\n    //const btc = priceList.BTC && canShowPrice ? (exchangedValue + remain * priceList.AE)/priceList.BTC : ''\n\n    window.assetsExchanged = assetsExchanged\n    \n    return (\n      <div className=\"App\">\n        <h1>兑换记录</h1>\n        <table border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" width=\"88%\" align=\"center\">\n          <thead>\n            <tr>\n              <th width=\"20%\">DATE</th>\n              <th width=\"25%\">SELL/BUY AE</th>\n              <th width=\"25%\">SELL/BUY TOKEN</th>\n              <th width=\"30%\">NOTE</th>\n            </tr>\n          </thead>\n          <tbody>\n            { rows }\n            <tr>\n              <td>BENEFIT</td>\n              <td className=\"ae-total\">REMAIN <b>{remain}</b> AE</td>\n              <td>CONVERT <b>{canShowPrice ? parseInt(exchangedValue/priceList.AE) : '...'}</b> AE</td>\n              <td>TOTAL <b>{canShowPrice ? \n                (remain + parseInt(exchangedValue/priceList.AE)) + ' (' + (remain + parseInt(exchangedValue/this.state.priceList.AE) - DEFAULT_AMOUNT) + ')'\n                :\n                 '...'\n              }</b> AE</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}